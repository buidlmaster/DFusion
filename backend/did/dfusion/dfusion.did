type UserExt = 
 record {
   entries: vec nat;
   followers: vec principal;
   following: vec principal;
   id: principal;
   likes: vec nat;
 };
type Time = int;
type Result_2 = 
 variant {
   err: text;
   ok: nat;
 };
type Result_1 = 
 variant {
   err: text;
   ok: EntryExt;
 };
type Result = 
 variant {
   err: text;
   ok: bool;
 };
type EntryExt = 
 record {
   content: text;
   createAt: Time;
   creator: principal;
   deleted: bool;
   id: nat;
   likes: vec principal;
   title: text;
 };
type EntryDigestExt = 
 record {
   contentDigest: text;
   createAt: Time;
   creator: principal;
   id: nat;
   likesNum: nat;
   title: text;
 };
type DFusion = 
 service {
   addAuth: (principal) -> (bool);
   createEntry: (text, text) -> (Result_2);
   follow: (principal) -> (bool);
   getBucketInfo: () -> (vec nat, vec nat, vec principal) query;
   getBucketStableSize: (principal) -> (nat64);
   getEntries: (nat32, nat32) -> (vec EntryDigestExt) query;
   getEntry: (nat) -> (Result_1);
   getUser: (principal) -> (opt UserExt) query;
   getUserEntries: (principal) -> (vec EntryDigestExt) query;
   like: (nat) -> (Result);
   removeAuth: (principal) -> (bool);
   setLimit: (opt nat, opt nat) -> (bool);
 };
service : (principal) -> DFusion
